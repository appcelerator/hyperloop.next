<project name="hyperloop-android" default="dist">
	<description>
		Ant build script for Titanium Android module hyperloop-android
	</description>

	<property name="ti.module.root" location="${basedir}"/>
	<property file="${basedir}/../build/build.properties" environment="env" />
	<property file="build.properties" environment="env" />

	<!-- Make sure 'architectures' is in manifest file -->
	<property file="${ti.module.root}/manifest" prefix="manifest"/>
	<fail message="Missing required manifest key 'architectures'.">
		<condition>
			<not>
				<isset property="manifest.architectures"/>
			</not>
		</condition>
	</fail>

	<fail message="Manifest key 'architectures' has no value.">
		<condition>
			<not>
				<length string="${manifest.architectures}" trim="true" when="greater" length="0"/>
			</not>
		</condition>
	</fail>

	<target name="pre.compile">
		<!-- Make a dummy empty assets folder or build will break -->
		<mkdir dir="${basedir}/assets"/>
	</target>

	<target name="pre.dist">
		<!-- Copy documentation subdirectories -->
		<mkdir dir="${basedir}/documentation"/>
		<copy todir="${basedir}/documentation">
			<fileset dir="${basedir}/../documentation"/>
		</copy>

		<!-- Copy example subdirectories -->
		<mkdir dir="${basedir}/example"/>
		<copy todir="${basedir}/example">
			<fileset dir="${basedir}/../example"/>
		</copy>

		<!-- Copy license -->
		<copy todir="${basedir}" file="${basedir}/../LICENSE.md"/>

		<!-- Copy common CLI hook -->
		<copy todir="${basedir}/plugins/hyperloop/hooks" file="${basedir}/../plugins/hyperloop.js"/>
	</target>

	<target name="post.clean">
		<delete dir="${basedir}/build"/>
		<delete dir="${basedir}/documentation"/>
		<delete dir="${basedir}/example"/>
		<delete dir="${basedir}/libs"/>
		<delete file="${basedir}/LICENSE.md"/>
		<delete dir="${basedir}/plugins/hyperloop/node_modules"/>
		<delete file="${basedir}/plugins/hyperloop/hooks/hyperloop.js"/>
		<delete dir="${basedir}/plugins/hyperloop/hooks/android/metabase/hyperloop"/>
	</target>

	<target name="post.dist" description="Include plugins folder in module zip">
		<!-- NPM Install for plugin hook -->
		<exec executable="npm" dir="${basedir}/plugins/hyperloop" failonerror="true">
			<arg value="install"/>
			<arg value="--production"/>
		</exec>

		<!-- Remove some test directories from NPM packages manually -->
		<delete dir="${basedir}/plugins/hyperloop/node_modules/ejs/test"/>
		<delete dir="${basedir}/plugins/hyperloop/node_modules/findit/example"/>
		<delete dir="${basedir}/plugins/hyperloop/node_modules/findit/test"/>
		<delete dir="${basedir}/plugins/hyperloop/node_modules/node-appc/test"/>

		<!-- Include hyperloop wrappers into module zip -->
		<zip destfile="${dist}/${module.id}-android-${manifest.version}.zip" update="true">
			<zipfileset dir="${ti.module.root}/plugins" prefix="plugins">
				<include name="**/*"/>
			</zipfileset>
		</zip>
	</target>

	<import file="${titanium.platform}/../module/android/build.xml"/>
	<property name="test.src" location="${ti.module.root}/test-src"/>
	<property name="test.classes" location="${build}/test-classes"/>
	<property name="test.lib" location="${ti.module.root}/test-lib"/>

	<target name="test" depends="compile.tests">
		<mkdir dir="${build}/reports"/>
		<junit printsummary="yes" haltonfailure="yes">
			<classpath>
				<fileset dir="${test.lib}">
					<include name="**/*.jar"/>
				</fileset>
				<path refid="project.classpath" />
				<pathelement location="${classes}"/>
				<pathelement location="${test.classes}"/>
			</classpath>

			<test name="hyperloop.AllTests" haltonfailure="no" todir="${build}/reports" outfile="junit">
				<formatter type="xml"/>
			</test>
		</junit>
	</target>

	<target name="compile.tests" depends="compile" description="Compile this module's test source code">
		<mkdir dir="${test.classes}"/>
		<javac
			destdir="${test.classes}"
			debug="${javac.debug}"
			target="1.6"
			source="1.6"
			includeantruntime="false">
			<src path="${test.src}" />
			<include name="**/*.java" />

			<classpath>
				<path refid="project.classpath" />
				<pathelement location="${classes}"/>
				<fileset dir="${test.lib}">
					<include name="**/*.jar"/>
				</fileset>
			</classpath>
		</javac>
	</target>
</project>
