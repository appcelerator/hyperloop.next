<%
var sanitizedName = classDefinition.safeName,
	fullName = classDefinition.name,
	parts = fullName.replace('$', '.').split('.'),
	baseName = parts[parts.length - 1],
	isInnerClass = (fullName.indexOf('$') != -1),
	isGlobal = parts.length == 1,
	parent,
	BASE_URL = 'http://developer.android.com/reference/' + classDefinition.name.replace(/\./g, '/').replace('$', '.') + '.html'; // Used to build up API URLs
-%>
/**
 * Hyperloop
 * Generated code is Copyright (c) <%= new Date().getFullYear() %> Appcelerator, Inc. and subject to the
 * Appcelerator Platform Subscription agreement.
 *
 * WARNING: This is generated code. Modify at your own risk and without support
 *
 * @module <%= fullName %>
 */
var Hyperloop = require('hyperloop');

<%
if (isInnerClass) {
	// it's a nested class. Load up the parent, then just hang our class off of that.
	parent = classDefinition.name.slice(0, classDefinition.name.indexOf('$'));
-%>
var EnclosingClass = require('./<%= parent %>');
<%
} else if (parts.length > 1) {
	// hang off the package
	parent = parts.slice(0, parts.length - 1).join('.');
-%>
var parentPackage = require('./<%= parent %>');
<% } -%>

/**
 * @class <%= fullName %>
<% if (classDefinition.superClass) {-%> * @extends <%= classDefinition.superClass.replace('$', '.') %> <%} %>
 * @constructor
 * @see {@link <%- BASE_URL %>}
 **/
var <%= sanitizedName %> = function() {
	var result;
	// Allow the constructor to either invoke the real java constructor, or function as a "wrapping" method that will take
	// a single argument that is a native hyperloop proxy for this class type and just wraps it in our JS type.
	if (arguments.length == 1 && arguments[0].isNativeProxy && arguments[0].isInstanceProxy && arguments[0].isInstanceOf('<%= classDefinition.name %>')) {
		result = arguments[0];
	}
	else {
<% if (classDefinition.attributes.indexOf('abstract') != -1) { -%>
		Ti.API.error('Cannot instantiate instance of abstract class: <%= classDefinition.name %>. Create a subclass using <%= fullName %>.extend();' );
<% } else { -%>
		result = <%= sanitizedName %>.class.newInstance(arguments);
<% } -%>
	}

	this.$native = result;
	this._hasPointer = result != null;
	this._private = {};
};
<% if (isGlobal) { -%>
global.<%= baseName %> = <%= sanitizedName %>;
<% } -%>

<% if (classDefinition.superClass) {
	// This is a subclass, let's extend the superclass!
-%>
var SuperClass = require('./<%- classDefinition.superClass %>');
<%= sanitizedName %>.prototype = Object.create(SuperClass.prototype);
<%= sanitizedName %>.prototype.constructor = <%= sanitizedName %>;

Object.defineProperty(<%= sanitizedName %>.prototype, 'super', {
	get: function() {
		if (!this._hasPointer) return null;
		return new <%= sanitizedName %>(this.$native.super);
	},
	enumerable: true
});
<%
} else {
-%>
<%= sanitizedName %>.toString = function() {
	return '[object ' + this.className + ']';
};

<%= sanitizedName %>.prototype.toString = function() {
	if (this._hasPointer) {
		return '[object ' + this.className + ']';
	}
	return null;
};
<%
}
-%>

<%= sanitizedName %>.className = '<%= classDefinition.name %>';
<%= sanitizedName %>.prototype.className = '<%= classDefinition.name %>';

// class property
Object.defineProperty(<%= sanitizedName %>, 'class', {
	get: function() {
		return Hyperloop.getClass('<%= classDefinition.name %>');
	},
	enumerable: true,
	configurable: false
});

<%
// Don't allow subclassing final classes, or non-public/protected
if (classDefinition.attributes.indexOf('final') == -1 &&
	(classDefinition.attributes.indexOf('public') != -1 ||
	classDefinition.attributes.indexOf('protected') != -1)) {
-%>
// Allow subclassing
<%= sanitizedName %>.extend = function (overrides) {
	var subclassProxy = Hyperloop.extend('<%= classDefinition.name %>');

	// Generate a JS wrapper for our dynamic subclass
	var SubClass = function() {
		var result = subclassProxy.newInstance(arguments),
			instance = this,
			copy = overrides,
			modified = {};

		function _wrapArg(arg) {
			if (arg.apiName && arg.isNativeProxy && arg.isInstanceProxy) { // Assume hyperloop proxy, wrap in JS wrapper
				var other = require('./' + arg.apiName);
				return new other(arg);
			}
			return arg;
		}

		function _wrapArgs() {
			var newArgs = [];
			for (var i = 0; i < arguments.length; i++) {
				newArgs[i] = _wrapArg(arguments[i]);
			}
			return newArgs;
		};

		Object.keys(copy).forEach(function (each) {
			// Hang the original override method on the JS wrapper object
			instance[each] = function() {
				return copy[each].apply(instance, arguments);
			};

			// Hang a delegate on the "overrides" object we pass into Java.
			// This one wraps hyperloop proxies from Java in their JS wrapper before forwarding on
			modified[each] = function() {
				return instance[each].apply(instance, _wrapArgs.apply(this, arguments));
			}
		});
		result.setOverrides(modified);

		this.$native = result;
		this._hasPointer = result != null;
		this._private = {};
	};
	// it extends the JS wrapper for the parent type
	SubClass.prototype = Object.create(<%= sanitizedName %>.prototype);
	SubClass.prototype.constructor = SubClass;
	return SubClass;
};
<%
}
-%>

// Cast
<%= sanitizedName %>.cast = function(object) {
	if (!object.$native || !object.$native.isInstanceProxy) return object;
	return new <%= sanitizedName %>(Hyperloop.cast('<%= classDefinition.name %>', object.$native));
};

// Constants
<%
for (var propertyName in classDefinition.properties) {
	var propertyDefinition = classDefinition.properties[propertyName];
	if (propertyDefinition.metatype == 'constant') {
-%>
/**
 * @constant
 * @default
 * @see {@link <%- BASE_URL %>#<%= propertyName %>}
 */
<%= sanitizedName %>.<%= propertyName %> = <%- propertyDefinition.value %>;
<%
	}
}
-%>

// Inner classes
<%
if (classDefinition.innerClasses) {
	for (var ic = 0; ic < classDefinition.innerClasses.length; ic++) {
		var innerClassName = classDefinition.innerClasses[ic];
		var baseInnerClassName = innerClassName.slice(innerClassName.indexOf('$') + 1);
-%>
Object.defineProperty(<%= sanitizedName %>, '<%= baseInnerClassName %>', {
	get: function() {
		return require('./<%= innerClassName %>');
	},
	enumerable: true
});
<%
	}
}
-%>

// Static fields
<%
for (var propertyName in classDefinition.properties) {
	var propertyDefinition = classDefinition.properties[propertyName];
	// static fields
	if (propertyDefinition.metatype == 'field' && !propertyDefinition.instance) {
-%>
// <%- BASE_URL %>#<%= propertyName %>
Object.defineProperty(<%= sanitizedName %>, '<%= propertyName %>', {
	get: function() {
		if (!this.class) return null;

		var result = this.class.getNativeField('<%= propertyName %>');
		if (result == null) {
			return null;
		}
		// Wrap result if it's not a primitive type?
		if (result.apiName) {
			if (result.apiName === '<%= classDefinition.name %>') {
				return new <%= sanitizedName %>(result);
			} else {
				var ctor = require('./' + result.apiName);
				return new ctor(result);
			}
		}
		return result;
	},
<%
		// Assume fields marked final are "read-only"
		if (propertyDefinition.attributes.indexOf('final') == -1) {
-%>
	set: function(newValue) {
		if (!this.class) return;

		this.class.setNativeField('<%= propertyName %>', newValue);
	},
<%		} -%>
	enumerable: true
});
<%
	}
}
-%>

// Instance Fields
<%
for (var propertyName in classDefinition.properties) {
	var propertyDefinition = classDefinition.properties[propertyName];
	// instance fields
	if (propertyDefinition.metatype == 'field' && propertyDefinition.instance) {
-%>
// <%- BASE_URL %>#<%= propertyName %>
Object.defineProperty(<%= sanitizedName %>.prototype, '<%= propertyName %>', {
	get: function() {
		if (!this._hasPointer) return null;

		var result = this.$native.getNativeField('<%= propertyName %>');
		if (result == null) {
			return null;
		}
		// Wrap result if it's not a primitive type?
		if (result.apiName) {
			if (result.apiName === '<%= classDefinition.name %>') {
				return new <%= sanitizedName %>(result);
			} else {
				var ctor = require('./' + result.apiName);
				return new ctor(result);
			}
		}
		return result;
	},
<%
		// Assume fields marked final are "read-only"
		if (propertyDefinition.attributes.indexOf('final') == -1) {
-%>
	set: function(newValue) {
		if (!this._hasPointer) return;

		this.$native.setNativeField('<%= propertyName %>', newValue);
	},
<%		} -%>
	enumerable: true
});
<%
	}
}
-%>

// Static methods
<%
for (var methodName in classDefinition.methods) {
	// skip constructors
	if (methodName == '<init>' || methodName == '<clinit>') {
		continue;
	}
	var overloads = classDefinition.methods[methodName];
	// filter to static variants
	overloads = overloads.filter(function (each) {
		return !each.instance;
	});
	if (overloads.length == 0) {
		continue;
	}
-%>
/**
 * TODO Fill out docs more...
 * @function <%= methodName %>
 * @static
<% 	for (var x = 0 ; x < overloads.length; x++) {
		var args = overloads[x].args;
		var types = [];
		for (var y = 0; y < args.length; y++) {
			types.push(args[y].type);
		}
-%>
 * @see {@link <%- BASE_URL %>#<%= methodName %>(<%= types.join(', ') %>)}
<%
	}
-%>
 **/
<%= sanitizedName %>.<%= methodName %> = function() {
	if (!this.class) return null;

	var result = this.class.callNativeFunction({
		func: '<%= methodName %>',
		instanceMethod: false,
		args: Array.prototype.slice.call(arguments)
	});
	if (result == null) {
		return null;
	}
	// Wrap result if it's not a primitive type?
	if (result.apiName) {
		if (result.apiName === '<%= classDefinition.name %>') {
			return new <%= sanitizedName %>(result);
		} else {
			var ctor = require('./' + result.apiName);
			return new ctor(result);
		}
	}
	return result;
};
<%
}
-%>

// Instance methods
<%
for (var methodName in classDefinition.methods) {
	// skip constructors
	if (methodName == '<init>' || methodName == '<clinit>') {
		continue;
	}
	var overloads = classDefinition.methods[methodName];
	// filter to instance variants
	overloads = overloads.filter(function (each) {
		return each.instance;
	});
	// TODO Skip overriding methods (i.e. equals(), toString(), etc)? Right now metadata doesn't contain info on that...
	if (overloads.length == 0) {
		continue;
	}
	// FIXME There are some cases where overloaded methods return different types
	// We can't assume all the overloads return the same type. I've seen cases where some overloads return void while others return boolean; some return String while another returns Object; etc.
	var returnType = overloads[0].returnType;
-%>
/**
 * TODO Fill out docs more...
 * @function <%= methodName %>
 * @memberof
 * @instance
<% 	for (var x = 0 ; x < overloads.length; x++) {
		var args = overloads[x].args;
		var types = [];
		for (var y = 0; y < args.length; y++) {
			types.push(args[y].type);
		}
-%>
 * @see {@link <%- BASE_URL %>#<%= methodName %>(<%= types.join(', ') %>)}
<%
	}
-%>
 **/
<%= sanitizedName %>.prototype.<%= methodName %> = function() {
	if (!this._hasPointer) return null;

	var result = this.$native.callNativeFunction({
		func: '<%= methodName %>',
		instanceMethod: true,
		args: Array.prototype.slice.call(arguments)
	});
	if (result == null) {
		return null;
	}
	// Wrap result if it's not a primitive type?
	if (result.apiName) {
		if (result.apiName === '<%= classDefinition.name %>') {
			return new <%= sanitizedName %>(result);
		} else {
			var ctor = require('./' + result.apiName);
			return new ctor(result);
		}
	}
	return result;
};
<%
}
-%>

// export the class
module.exports = <%= sanitizedName %>;
